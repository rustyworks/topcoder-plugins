import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class Generators:

    def generate(self, a, p):
    	limit_range = a ** (p - 2)
    	yield 1
    	for i in range(1, p):
    		yield (a ** i) % p

    def find(self, p):
    	set_p = set(range(1, p))
    	answer = []
        for a in range(p):
        	set_generator = set(self.generate(a, p))
        	# print(set_generator, set_p)
        	if set_generator - set_p == set_p - set_generator:
        		answer.append(a)
        return answer

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str(p0))
	print(str("]"))
	obj = Generators()
	startTime = time.clock()
	answer = obj.find(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		sys.stdout.write(str("\t") + str("{"))
		for i in range(len(p1)):
			if (i > 0):
				sys.stdout.write(str(","))
			
			sys.stdout.write(str(p1[i]))
		
		print(str("}"))
	
	print(str("Your answer:"))
	sys.stdout.write(str("\t") + str("{"))
	for i in range(len(answer)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(answer[i]))
	
	print(str("}"))
	if (hasAnswer):
		if (len(answer) != len(p1)):
			res = False
		else:
			for i in range(len(answer)):
				if (answer[i] != p1[i]):
					res = False
				
			
		
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = 3
p1 = (2,)
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = 5
p1 = (2,3)
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = 13
p1 = (2,6,7,11)
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = 19
p1 = (2,3,10,13,14,15)
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = 337
p1 = (10,15,19,20,22,23,29,31,33,34,44,45,46,51,53,60,61,67,68,70,71,73,80,83,87,89,90,93,99,101,106,109,114,116,118,120,124,130,132,134,139,143,151,152,154,160,161,166,171,176,177,183,185,186,194,198,203,205,207,213,217,219,221,223,228,231,236,238,244,247,248,250,254,257,264,266,267,269,270,276,277,284,286,291,292,293,303,304,306,308,314,315,317,318,322,327)
all_right = (disabled or KawigiEdit_RunTest(4, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
