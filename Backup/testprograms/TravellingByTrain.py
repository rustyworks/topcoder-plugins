import math,string,itertools,fractions,heapq,collections,re,array,bisect,random
from datetime import datetime
class TravellingByTrain:
    def earliestArrival(self, timeTable):
    	go_time = None
    	f = lambda x: datetime.strptime(x, '%H:%M')
    	g = lambda x: x.strftime('%H:%M')
    	day = 1
        for times in timeTable:
        	time_list = times.split()
        	cached_time = None
        	for time in time_list:
        		start_time, end_time = time.split('-')
        		if f(end_time).hour < f(start_time).hour:
        			day += 1
        		if f(end_time).hour == f(start_time).hour and f(end_time).minute < f(start_time).minute:
        			day += 1
        		if cached_time == None:
        			cached_time = end_time
        		if go_time is None:
        			go_time = f(end_time)
        			break
        		else:
        			if go_time.hour < f(start_time).hour:
        				go_time = f(end_time)
        				break
        			else:
        				if go_time.hour == f(start_time).hour and go_time.minute <= f(start_time).minute:
        					go_time = f(end_time)
        					break
        	else:
        		print('use cached')
        		go_time = f(end_time)
        		day += 1
        return g(go_time) + ', day ' + str(day)

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, hasAnswer, p1):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str("\"") + str(p0[i]) + str("\""))
	
	sys.stdout.write(str("}"))
	print(str("]"))
	obj = TravellingByTrain()
	startTime = time.clock()
	answer = obj.earliestArrival(p0)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str("\"") + str(p1) + str("\""))
	
	print(str("Your answer:"))
	print(str("\t") + str("\"") + str(answer) + str("\""))
	if (hasAnswer):
		res = answer == p1
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = ("10:00-13:00 12:00-15:00","11:00-16:00 14:00-19:00")
p1 = "19:00, day 1"
all_right = (disabled or KawigiEdit_RunTest(0, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = ("09:00-13:57","13:56-17:00")
p1 = "17:00, day 2"
all_right = (disabled or KawigiEdit_RunTest(1, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = ("10:00-08:00",)
p1 = "08:00, day 2"
all_right = (disabled or KawigiEdit_RunTest(2, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = ("09:10-11:00 09:05-10:05","10:10-12:00 11:00-11:05","17:00-08:00","09:00-08:00")
p1 = "08:00, day 3"
all_right = (disabled or KawigiEdit_RunTest(3, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 4 -----
disabled = False
p0 = ("10:00-13:00 12:00-15:00","11:00-16:00 14:00-19:00")
p1 = "19:00, day 1"
all_right = (disabled or KawigiEdit_RunTest(4, p0, True, p1) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
