import math,string,itertools,fractions,heapq,collections,re,array,bisect,random

class ComputationalComplexity:
    def fastestAlgo(self, constant, power, logPower, N):
    	algorithms = []
        for i in range(len(constant)):
        	algorithms.append(constant[i] * N**power[i] * math.log(N)**logPower[i])
        fastest_result = min(algorithms)
        return algorithms.index(fastest_result)

# BEGIN KAWIGIEDIT TESTING
# Generated by KawigiEdit-pf 2.3.0
import sys
import time
def KawigiEdit_RunTest(testNum, p0, p1, p2, p3, hasAnswer, p4):
	sys.stdout.write(str("Test ") + str(testNum) + str(": [") + str("{"))
	for i in range(len(p0)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p0[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p1)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p1[i]))
	
	sys.stdout.write(str("}") + str(",") + str("{"))
	for i in range(len(p2)):
		if (i > 0):
			sys.stdout.write(str(","))
		
		sys.stdout.write(str(p2[i]))
	
	sys.stdout.write(str("}") + str(",") + str(p3))
	print(str("]"))
	obj = ComputationalComplexity()
	startTime = time.clock()
	answer = obj.fastestAlgo(p0, p1, p2, p3)
	endTime = time.clock()
	res = True
	print(str("Time: ") + str((endTime - startTime)) + str(" seconds"))
	if (hasAnswer):
		print(str("Desired answer:"))
		print(str("\t") + str(p4))
	
	print(str("Your answer:"))
	print(str("\t") + str(answer))
	if (hasAnswer):
		res = answer == p4
	
	if (not res):
		print(str("DOESN'T MATCH!!!!"))
	elif ((endTime - startTime) >= 2):
		print(str("FAIL the timeout"))
		res = False
	elif (hasAnswer):
		print(str("Match :-)"))
	else:
		print(str("OK, but is it right?"))
	
	print(str(""))
	return res

all_right = True
tests_disabled = False


# ----- test 0 -----
disabled = False
p0 = (5,50,45)
p1 = (2,1,1)
p2 = (0,1,1)
p3 = 400
p4 = 2
all_right = (disabled or KawigiEdit_RunTest(0, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 1 -----
disabled = False
p0 = (5,50,45)
p1 = (2,1,1)
p2 = (0,1,1)
p3 = 10
p4 = 0
all_right = (disabled or KawigiEdit_RunTest(1, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 2 -----
disabled = False
p0 = (100,)
p1 = (5,)
p2 = (5,)
p3 = 1000
p4 = 0
all_right = (disabled or KawigiEdit_RunTest(2, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

# ----- test 3 -----
disabled = False
p0 = (32,33,58,93,8,27,43,69,95,77,57,73,87,87,50,92,67,20,2,46,73,48,25,90,48,18,28,26,20,33,59,48,69,4,19,13,10,78,55,90)
p1 = (5,0,1,4,0,3,5,4,3,3,0,5,0,5,5,3,0,4,1,1,4,0,2,4,0,0,3,2,0,0,4,3,5,0,2,4,3,4,3,0)
p2 = (2,2,2,0,4,5,2,3,4,5,0,0,1,4,2,5,2,4,5,0,5,4,3,0,4,1,1,3,3,0,1,5,2,1,1,4,0,0,2,3)
p3 = 1000
p4 = 33
all_right = (disabled or KawigiEdit_RunTest(3, p0, p1, p2, p3, True, p4) ) and all_right
tests_disabled = tests_disabled or disabled
# ------------------

if (all_right):
	if (tests_disabled):
		print(str("You're a stud (but some test cases were disabled)!"))
	else:
		print(str("You're a stud (at least on given cases)!"))
	
else:
	print(str("Some of the test cases had errors."))

# END KAWIGIEDIT TESTING
#Powered by KawigiEdit-pf 2.3.0!
